import slk13 from "../../../slike/slike13.png";
import slk14 from "../../../slike/slike14.png";
import slk15 from "../../../slike/slike15.png";
import slk16 from "../../../slike/slike16.png";
import slk17 from "../../../slike/slike17.png";
import slk18 from "../../../slike/slike18.png";


export const Obj1 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'JavaScript Functions',
    tekst1:"A JavaScript work is a square of code intended to play out a specific undertaking. ",
    tekst2:"The fundamental preferences of utilizing capacities: ",
    tekst3:"Code reuse: Define the code once, and use it ordinarily. ",
    tekst4:"Utilize a similar code ordinarily with various contentions, to create various outcomes. ",
    tekst5:"Capacity is a sure square of code that can be reused again and again. ",
    slika1:"",
    tekst6:"",
    slika2:"",
    tekst7:"",
    slika3:"",
    tekst8:"",
    slika4:"",
    tekst9:"",
    slika5:"",
    tekst10:"",
    slika6:"",
    tekst11:"",
    slika7:"",
    tekst12:"",
    slika8:"",
    tekst13:"",
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:'A JavaScript work is executed when "something" conjures, or calls, it. ',
    slika11:''

    ,};
  
  export const Obj2 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Defining a Function ',
    tekst1:'To characterize a JavaScript work, utilize the capacity watchword, trailed by a name, trailed by a bunch of brackets (). ',
    tekst2:'he code to be executed by the capacity is put inside wavy sections {}. ',
    tekst3:'',
    tekst4:'function Ime() { ',
    tekst5:'/code should be executed ',
    slika1:'',
    tekst6: '}',
    slika2:'',
    tekst7:'',
    slika3:'',
    tekst8:'',
    slika4:'',
    tekst9:'',
    slika5:'',
    tekst10:'',
    slika6:'',
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: 'Function names can contain letters, digits, underscores, and dollar signs (same guidelines as factors).     ',
    slika11:'',
  };

  export const Obj3 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'Calling a Function ',
    tekst1:"To execute the capacity, you need to call it.",
    tekst2:"To call a capacity, start with the name of the capacity, at that point follow it with the contentions in enclosures.",
    tekst3:"Ex:  ",
    tekst4:"function myFun () {  ",
    tekst5:'alert("This is how we are calling a function");}     ',
    slika1:"",
    tekst6:"myFunc(); ",
    slika2:"",
    tekst7:"",
    slika3:"",
    tekst8:"When the capacity is characterized, JavaScript permits you to call it however many occasions as you need to. ",
    slika4:"",
    tekst9:'work myFunc() { alert("Alert box"); } ',
    slika5:"",
    tekst10:"myFun(); ",
    slika6:"",
    tekst11:' /"Ready box"',
    slika7:"",
    tekst12:"/random code  ",
    slika8:"",
    tekst13:'myFun(); /"alert box " ',
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:"Continuously make sure to end the assertion with a semicolon subsequent to calling the capacity. You can likewise call a capacity utilizing this language structure: myFunction.call(). The thing that matters is that when bringing along these lines, you are passing the 'this' catchphrase to a capacity. You will find out about it later. ",
    slika11:''

    ,};
  
  export const Obj4 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Function Parameters ',
    tekst1:'Functions can take parameters.',
    tekst2:"Function parameters are the names recorded in the capacity's definition.",
    tekst3:'',
    tekst4:'Syntax: ',
    tekst5:'funcName(parameter1, parameter 2, parameter3) { ',
    slika1:'',
    tekst6: '// random code',
    slika2:'',
    tekst7:'',
    slika3:'',
    tekst8:'',
    slika4:'',
    tekst9:'',
    slika5:'',
    tekst10:'',
    slika6:'',
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: 'Similarly as with factors, boundaries ought to be given names, which are isolated by commas inside the brackets.     ',
    slika11:'',
  };

  
  export const Obj5 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'Using Parameters  ',
    tekst1:"In the wake of characterizing the parameters, you can utilize them inside the function. ",
    tekst2:"",
    tekst3:"function Hello(name) { ",
    tekst4:'alert("Hello, " + name); }     ',
    tekst5:'alert("This is how we are calling a function");}     ',
    slika1:"",
    tekst6:'Hello("Rijad"); ',
    slika2:"",
    tekst7:"This function takes in a parameter, which is called name. When calling the function, offer the parameter's benefit (contention) inside the brackets.     ",
    slika3:"",
    tekst8:"",
    slika4:"",
    tekst9:" ",
    slika5:"",
    tekst10:"",
    slika6:"",
    tekst11:'',
    slika7:"",
    tekst12:" ",
    slika8:"",
    tekst13:' ',
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:"Function contentions are the genuine qualities passed to (and got by) the function.  ",
    slika11:''

    ,};
  
  export const Obj6 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Function Parameters ',
    tekst1:'You can characterize a single function, and pass distinctive parameter esteems (contentions) to it. ',
    tekst2:"",
    tekst3:'',
    tekst4:'function Hello(name) {  ',
    tekst5:'alert("Hello, " + name);}   ',
    slika1:'',
    tekst6: 'sayHello("Rijad");',
    slika2:'',
    tekst7:'sayHello("Samir");',
    slika3:'',
    tekst8:'sayHello("Ozren");',
    slika4:'',
    tekst9:'',
    slika5:'',
    tekst10:'',
    slika6:'',
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: "This will execute the function's code each an ideal opportunity for the gave contention. ",
    slika11:'',
  };

  export const Obj7 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'Multiple Parameters ',
    tekst1:"You can characterize different parameters for a function by comma-isolating them.  ",
    tekst2:"",
    tekst3:"function myFunction (a, b) {",
    tekst4:'// random code     ',
    tekst5:'} ',
    slika1:"",
    tekst6:"The parameters are used within the function's definition. ",
    slika2:"",
    tekst7:"function Hello(name, age) { ",
    slika3:"",
    tekst8:'document.write( name + " is " + age + " years old.");}',
    slika4:"",
    tekst9:" ",
    slika5:"",
    tekst10:"",
    slika6:"",
    tekst11:'',
    slika7:"",
    tekst12:" ",
    slika8:"",
    tekst13:' ',
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:"The model above characterizes the capacity myFunc to take two boundaries. Capacity boundaries are the names recorded in the capacity definition.",
    slika11:''

    ,};
  
  export const Obj8 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Multiple Parameters',
    tekst1:' When calling the function, give the arguments in a similar request wherein you characterized them. ',
    tekst2:"",
    tekst3:'function sayHello(name, age) { ',
    tekst4:'document.write( name + " is " + age + " years old.");} ',
    tekst5:'sayHello("John", 20) ',
    slika1:'',
    tekst6: 'Subsequent to characterizing the function, you can call it however many occasions on a case by case basis. ',
    slika2:'',
    tekst7:'JavaScript capacities do not check the quantity of contentions got. ',
    slika3:'',
    tekst8:'',
    slika4:'',
    tekst9:'',
    slika5:'',
    tekst10:'',
    slika6:'',
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: "If you pass more arguments than are defined, they will be assigned to an array called arguments. They can be used like this: arguments[0], arguments[1], etc. Subsequent to characterizing the capacity, you can call it however many occasions on a case by case basis. JavaScript capacities don't check the quantity of contentions got. In the event that a capacity is called with missing contentions (less than announced), the missing qualities are set to unclear, which demonstrates that a variable has not been alloted a worth.",
    slika11:'',
  };

  export const Obj9 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'Function Return',
    tekst1:"A function can have a discretionary bring articulation back. It is utilized to restore an incentive from the function. ",
    tekst2:"This assertion is valuable when making estimations that require an outcome. ",
    tekst3:"At the point when JavaScript arrives at a return articulation, the function quits executing. ",
    tekst4:'Utilize the return explanation to restore a worth. ',
    tekst5:'For instance, we should compute the result of two numbers, and return the outcome. ',
    slika1:"",
    tekst6:" ",
    slika2:"",
    tekst7:"function myFun(x, y) { ",
    slika3:"",
    tekst8:'return x * y; }',
    slika4:"",
    tekst9:" ",
    slika5:"",
    tekst10:"var a = myFun(3, 5); ",
    slika6:"",
    tekst11:'// Return value will end up in a',
    slika7:"",
    tekst12:" ",
    slika8:"",
    tekst13:' ',
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:"In the event that you don't restore a single thing from a capacity, it will restore vague. ",
    slika11:''

    ,};
  
  export const Obj10 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Function Return',
    tekst1:' Another example:',
    tekst2:"",
    tekst3:'function addNumb(x, y) { ',
    tekst4:'var z = x+y; ',
    tekst5:'return z;',
    slika1:'',
    tekst6: '} ',
    slika2:'',
    tekst7:'document.write( addNumb(20, 1) ); ',
    slika3:'',
    tekst8:'',
    slika4:'',
    tekst9:'',
    slika5:'',
    tekst10:'',
    slika6:'',
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: "The document.write command outputs the value returned by the function, which is the sum of the two parameters.",
    slika11:'',
  };

  export const Obj11 = {
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions ',
    glavni_naslov: 'The Alert Box',
    tekst1:"JavaScript offers three sorts of popup boxes, the Alert, Prompt, and Confirm boxes. ",
    tekst2:"An alarm box is utilized when you need to guarantee that data breaks through to the client. ",
    tekst3:"At the point when an alarm put away pops, the client should click OK to continue. ",
    tekst4:'The alarm work takes a solitary boundary, which is the content shown in the popup box. ',
    tekst5:'',
    slika1:"",
    tekst6:"Example:",
    slika2:"",
    tekst7:'alert("Do you truly need to leave this page?");',
    slika3:slk13,
    tekst8:'Result: ',
    slika4:"",
    tekst9:"To show line breaks inside a popup box, utilize an oblique punctuation line followed by the character n.  ",
    slika5:"",
    tekst10:'alert("Hello\nHow are you?");',
    slika6:slk14,
    tekst11:'',
    slika7:"",
    tekst12:" ",
    slika8:"",
    tekst13:' ',
    slika9:'',
    tekst14:"Important to know!",
    slika10:'',
    tekst15:"Be cautious when utilizing alert boxes, as the client can keep utilizing the page exclusively in the wake of clicking OK.",
    slika11:''

    ,};
  
  export const Obj12 = {
   
    svijetlaPozadina: true,
    svijetliTekst: false,
    svijetliTekstDeskripcija: false,
    gornji: 'Functions',
    glavni_naslov: 'Confirm Box',
    tekst1:'A confirm box is often used to have the user verify or accept something.',
    tekst2:"At the point when an affirm take care of pops, the client should click either OK or Cancel to continue. ",
    tekst3:' In the event that the client clicks OK, the case brings valid back. On the off chance that the client clicks Cancel, the container returns false.     ',
    tekst4:'The brief() strategy takes two boundaries.  ',
    tekst5:'',
    slika1:'',
    tekst6: 'Example:',
    slika2:'',
    tekst7:'var result = confirm("Do you really want to leave this page?");',
    slika3:'',
    tekst8:'if (result == true) { ',
    slika4:'',
    tekst9:'alert("Thanks for visiting");}  ',
    slika5:'',
    tekst10:'else { alert("Thanks for staying with us"); }',
    slika6:'',
    tekst11:'Result:',
    slika7:slk16,
    tekst12: 'The result when the user clicks OK:',
    slika8:slk17,
    tekst13:'The result when the user clicks Cancel: ',
    slika9:slk18,
    tekst14:'Important to know!',
    slika10:'',
    tekst15: "Try not to abuse this strategy, since it likewise keeps the client from getting to different pieces of the page until the crate is shut.",
    slika11:'',
  };

 
  export const Obj13 = {
   
    svijetlaPozadina: false,
    svijetliTekst: true,
    svijetliTekstDeskripcija: true,
    gornji: 'Functions',
    glavni_naslov: 'Prompt Box',
    tekst1:'A brief box is regularly used to have the client input an incentive prior to entering a page. ',
    tekst2:"At the point when a brief box springs up, the client should click either OK or Cancel to continue in the wake of entering the info esteem. ",
    tekst3:' In the event that the client clicks OK, the container restores the information esteem. In the event that the client clicks Cancel, the container brings invalid back.',
    tekst4:'The brief() strategy takes two boundaries.  ',
    tekst5:'- The first is the mark, which you need to show in the content box. ',
    slika1:'',
    tekst6: '- The second is a default string to show in the content box (discretionary). ',
    slika2:'',
    tekst7:'Example:',
    slika3:'',
    tekst8:'var user = prompt("Please enter your name"); ',
    slika4:'',
    tekst9:'alert(user);',
    slika5:'',
    tekst10:'The prompt shows up as: ',
    slika6:slk15,
    tekst11:'',
    slika7:'',
    tekst12: '',
    slika8:'',
    tekst13:'',
    slika9:'',
    tekst14:'Important to know!',
    slika10:'',
    tekst15: 'At the point when a brief box springs up, the client should click either "Alright" or "Drop" to continue in the wake of entering an info esteem. Try not to abuse this strategy, since it keeps the client from getting to different pieces of the page until the case is shut.',
    slika11:'',
  };